@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm OnValidSubmit="Authenticate" FormName="LoginForm" Model="@Model">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <h3>Entrar na plataforma</h3>
            </div>
            <div class="mb-3">
                <label>Email</label>
                <InputText @bind-Value="Model.Email" class="form-control" placeholder="Email" />
                <ValidationMessage For="() => Model.Email" />
            </div>
            <div class="mb-3">
                <label>Senha</label>
                <InputText @bind-Value="Model.Senha" type="password" class="form-control" placeholder="Senha" />
                <ValidationMessage For="() => Model.Senha" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@ErrorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
        <div class="criar-conta">
            <a href="/novapessoa" class="text-secondary ml-auto">Criar Conta</a>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }
    
    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();
    private string? ErrorMessage;

    private async Task Authenticate()
    {
        Model.Senha = HashPassword(Model.Senha);
        var claims = await authenticationRepository.AuthenticateAsync(Model);

        if (claims is null)
            navigation.NavigateTo("/access-denied");

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext!.SignInAsync(principal);
        navigation.NavigateTo("/pessoas");
    }

    private static string HashPassword(string password)
        => BCrypt.Net.BCrypt.HashPassword(password);
}
